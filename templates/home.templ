package templates

import (
	"fmt"
	"github.com/iamhectorsosa/templ-test/components"
	"strings"
	"time"
)

templ Home(config Config) {
	<!DOCTYPE html>
	<html lang="en" class="dark scroll-smooth">
		@Head(config)
		<body class="relative">
			<main class="mx-auto flex flex-col justify-center max-w-2xl gap-y-6 py-24 print:py-0 px-6">
				<div class="space-y-8 print:space-y-6">
					<section class="space-y-4 print:space-y-2">
						<heading class="space-y-2 print:space-y-1">
							@components.Heading(components.HeadingProps{}) {
								{ config.Heading.Name }
							}
							@components.Paragraph(components.ParagraphProps{Class: "font-medium leading-normal text-lg print:text-base text-muted-foreground"}) {
								{ config.Heading.Bio }
							}
						</heading>
						<ul class="flex flex-wrap gap-1.5">
							for _, contact := range config.Heading.Contact {
								<li>
									@components.Badge(components.BadgeProps{
										Variant: "outline",
										Href:    contact.Href,
										Title:   fmt.Sprintf("Go to %s's %s", config.Heading.Name, contact.Type),
									}) {
										if contact.Type == "Website" {
											@components.WebIcon()
										}
										if contact.Type == "Email" {
											@components.MailIcon()
										}
										if contact.Type == "GitHub" {
											@components.GitHubIcon()
										}
										if contact.Type == "LinkedIn" {
											@components.LinkedInIcon()
										}
										{ contact.Label }
									}
								</li>
							}
						</ul>
					</section>
					<section class="space-y-4 print:space-y-2">
						@components.Heading(components.HeadingProps{Level: "h2"}) {
							About
						}
						for _, aboutText := range strings.Split(config.Heading.About, "\n") {
							@components.Paragraph(components.ParagraphProps{}) {
								{ aboutText }
							}
						}
					</section>
					for _, section := range config.Sections {
						@components.Section(section.Title, formatItems(section.Items))
					}
				</div>
				@components.Print()
			</main>
		</body>
	</html>
}

func formatItems(items []SectionItem) []components.SectionItem {
	sectionItems := []components.SectionItem{}
	for _, item := range items {
		sectionItems = append(sectionItems, components.SectionItem{
			Title:       item.Title,
			Date:        formatDates(item.StartDate, item.EndDate),
			Href:        item.Href,
			Description: item.Description,
		})
	}
	return sectionItems
}

func formatDates(startDate string, endDate *string) string {
	startYear, err := time.Parse("2006", startDate)
	if err != nil {
		return "Invalid start date format"
	}

	if endDate == nil {
		return fmt.Sprintf("%d", startYear.Year())
	}

	if *endDate == "Now" || *endDate == "now" {
		currentYear := time.Now().Year()
		return fmt.Sprintf("%d — Now · %d yrs", startYear.Year(), currentYear-startYear.Year())
	}

	endYear, err := time.Parse("2006", *endDate)
	if err != nil {
		return "Invalid end date format"
	}

	return fmt.Sprintf("%d — %d · %d yrs", startYear.Year(), endYear.Year(), endYear.Year()-startYear.Year())
}
